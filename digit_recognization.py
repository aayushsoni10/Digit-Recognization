# -*- coding: utf-8 -*-
"""Digit_recognization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I7XbE-ht39a5belPaq5H-k__Imzeh_A4
"""

import pandas as pd
import numpy as np
from keras.layers import Conv2D , MaxPooling2D , Dense, Flatten , Input , Dropout
from keras.models import Sequential , Model
import keras
import tensorflow as tf
from PIL import Image
from keras.models import model_from_json
import os
from keras.preprocessing.image import ImageDataGenerator
from keras import utils as np_utils

df = pd.read_csv('train.csv')
images = []
Y = np.asarray(df['label'])
Y = np.reshape(Y, (Y.shape[0], 1))
print(Y.shape)
df = df.drop(['label'], axis=1)

images = df.to_numpy()
images = np.reshape(images, (images.shape[0], 28, 28, 1))
X = images
del images
X = X/255.0
print(X.shape)

Y = np_utils.to_categorical(Y)
print(Y)

model = Sequential()
model.add(Conv2D(30, (5, 5), input_shape=(28, 28, 1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(15, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(10, activation='softmax'))
# Compile model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X , Y , batch_size = 128 , epochs = 100 , validation_split = 0)
print(model.summary())

model_json = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)
model.save_weights("model_digit.h5")
print("Saved model to disk")

df1 = pd.read_csv('test.csv')
images = df1.to_numpy()
images = np.reshape(images, (images.shape[0], 28, 28, 1))
Xt = images
del images
Xt = Xt/255.0
print(Xt.shape)

Yt = model.predict(Xt)
Ya = []
for a in range(len(Yt)):
  mi=0
  mv=0
  for b in range(10):
    if(Yt[a][b]>mv):
      mv = Yt[a][b]
      mi=b
  Ya.append(mi)
print(Ya)

Ya = np.asarray(Ya)
df2 = pd.DataFrame(Ya)
df2 = df2.rename(index=str, columns={0:'Label'})
print(df2)
df2['ImageId'] = [(x+1) for x in range(Ya.shape[0])]
print(df2)
df2.to_csv('s1.csv')